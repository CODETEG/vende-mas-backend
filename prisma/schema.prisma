generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id            Int      @id @default(autoincrement()) @map("id")
  email         String   @unique @map("email")
  firstName     String   @map("first_name")
  secondName    String?  @map("second_name")
  firstSurname  String   @map("first_surname")
  secondSurname String?  @map("second_surname")
  phoneNumbers  String[] @map("phone_numbers")

  user     User?
  customer Customer?

  identifications Identification[]

  @@index(email)
  @@map("people")
}

enum IdentificationType {
  DNI
  PASSPORT
  RUC
}

model Identification {
  id     Int                @id @default(autoincrement())
  type   IdentificationType @map("type")
  value  String             @unique @map("value")
  active Boolean            @default(true) @map("active")

  personId Int    @map("person_id")
  person   Person @relation(fields: [personId], references: [id])

  @@map("identifications")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique @map("username")
  password String   @map("password")
  role     UserRole @map("role")
  active   Boolean  @default(true) @map("active")

  personId Int    @unique @map("person_id")
  person   Person @relation(fields: [personId], references: [id])

  employee Employee?

  @@map("users")
}

model Employee {
  id           Int      @id @default(autoincrement())
  contractDate DateTime @map("contract_date") @db.Date
  active       Boolean  @default(true) @map("active")

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  routes   Route[]
  tasks    Task[]
  comments Comment[]

  @@map("employees")
}

model Customer {
  id      Int     @id @default(autoincrement())
  address String  @map("address")
  active  Boolean @default(true) @map("active")

  personId Int    @unique @map("person_id")
  person   Person @relation(fields: [personId], references: [id])
  zoneId   Int    @map("zone_id")
  zone     Zone   @relation(fields: [zoneId], references: [id])

  tasks Task[]

  @@map("customers")
}

model City {
  id   Int    @id @default(autoincrement())
  name String @unique @map("name")

  zones Zone[]

  @@map("cities")
}

model Zone {
  id          Int     @id @default(autoincrement())
  name        String  @unique @map("name")
  description String? @map("description")

  cityId  Int   @map("city_id")
  city    City  @relation(fields: [cityId], references: [id])
  routeId Int   @map("route_id")
  route   Route @relation(fields: [routeId], references: [id])

  customers Customer[]

  @@map("zones")
}

model Route {
  id   Int      @id @default(autoincrement())
  date DateTime @map("date") @db.Date

  employeeId Int      @map("employee_id")
  employee   Employee @relation(fields: [employeeId], references: [id])

  zones Zone[]

  @@unique([date, employeeId])
  @@map("routes")
}

enum TaskType {
  SALE
  COLLECTION
  QUOTATION
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  DONE
}

model Task {
  id             Int        @id @default(autoincrement())
  type           TaskType   @map("type")
  status         TaskStatus @map("status")
  completionDate DateTime?  @map("completion_date") @db.Date
  assignedDate   DateTime?  @map("assigned_date") @db.Date
  priority       Boolean    @default(false) @map("priority")

  customerId            Int       @map("customer_id")
  customer              Customer  @relation(fields: [customerId], references: [id])
  completedByEmployeeId Int?      @map("completed_by_employee_id")
  completedByEmployee   Employee? @relation(fields: [completedByEmployeeId], references: [id])

  locations Location[]
  comments  Comment[]

  sale       Sale?
  collection Collection?

  @@map("tasks")
}

enum LocationType {
  START
  END
}

model Location {
  id       Int          @id @default(autoincrement())
  type     LocationType @map("type")
  lat      Float        @map("lat")
  lng      Float        @map("lng")
  dateTime DateTime     @map("date_time") @db.Timestamp(0)

  taskId Int  @map("task_id")
  task   Task @relation(fields: [taskId], references: [id])

  @@map("locations")
}

model Comment {
  id       Int      @id @default(autoincrement())
  content  String   @map("content")
  dateTime DateTime @map("date_time") @db.Timestamp(0)

  commentId  Int?     @map("comment_id")
  comment    Comment? @relation(fields: [commentId], references: [id], name: "CommentReplies")
  taskId     Int      @map("task_id")
  task       Task     @relation(fields: [taskId], references: [id])
  employeeId Int      @map("employee_id")
  employee   Employee @relation(fields: [employeeId], references: [id])

  comments Comment[] @relation(name: "CommentReplies")

  @@map("comments")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String  @unique @map("name")
  description String? @map("description")
  price       Float   @map("price")
  stock       Int     @map("stock")
  active      Boolean @default(true) @map("active")

  items Item[]

  @@map("products")
}

model Sale {
  id          Int      @id @default(autoincrement())
  dateTime    DateTime @map("date_time") @db.Timestamp(0)
  total       Float    @map("total")
  outstanding Float    @default(0) @map("outstanding")

  taskId Int?  @unique @map("task_id")
  task   Task? @relation(fields: [taskId], references: [id])

  items       Item[]
  collections Collection[]

  @@map("sales")
}

model Item {
  id       Int   @id @default(autoincrement())
  quantity Int   @map("quantity")
  price    Float @map("price")

  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  saleId    Int     @map("sale_id")
  sale      Sale    @relation(fields: [saleId], references: [id])

  @@map("items")
}

model Collection {
  id      Int      @id @default(autoincrement())
  dueDate DateTime @map("due_date") @db.Date

  saleId Int   @map("sale_id")
  sale   Sale  @relation(fields: [saleId], references: [id])
  taskId Int?  @unique @map("task_id")
  task   Task? @relation(fields: [taskId], references: [id])

  payments Payment[]

  @@map("collections")
}

enum PaymentStatus {
  PENDING
  PROCESSED
}

enum PaymentMethod {
  CASH
  TRANSFER
  CHECK
}

model Payment {
  id       Int           @id @default(autoincrement())
  amount   Float         @map("amount")
  dateTime DateTime      @map("date_time") @db.Timestamp(0)
  status   PaymentStatus @map("status")
  method   PaymentMethod @map("method")

  collectionId Int        @map("collection_id")
  collection   Collection @relation(fields: [collectionId], references: [id])

  @@map("payments")
}
